name: Docker Build and Push

# 触发条件
on:
  # 手动触发
  workflow_dispatch:
    inputs:
      version_type:
        description: '版本类型'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      custom_version:
        description: '自定义版本号 (仅当版本类型为custom时)'
        required: false
        type: string
      push_to_registry:
        description: '推送到容器仓库'
        required: true
        default: true
        type: boolean
  
  # 推送到main分支时自动构建
  push:
    branches: [ "main" ]
    paths:
      - 'app.py'
      - 'requirements.txt'
      - 'Dockerfile'
      - 'templates/**'
      - 'static/**'
  
  # Pull Request时构建测试
  pull_request:
    branches: [ "main" ]
    paths:
      - 'app.py'
      - 'requirements.txt'
      - 'Dockerfile'
      - 'templates/**'
      - 'static/**'

# 环境变量
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    # 这就是全部需要的权限配置
    permissions:
      contents: write      # 推送VERSION文件
      packages: write      # 推送Docker镜像到ghcr.io
      id-token: write      # OIDC认证（可选）
      security-events: write # 上传安全扫描结果（可选）
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # 使用自动提供的token

      
      # 设置Docker Buildx
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      
      # 登录到GitHub Container Registry
      - name: 🔑 Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # 计算版本号
      - name: 📋 Calculate version
        id: version
        run: |
          set -e
          
          # 获取当前版本
          if [ -f VERSION ]; then
            CURRENT_VERSION=$(cat VERSION)
          else
            CURRENT_VERSION="1.0.0"
          fi
          
          echo "当前版本: $CURRENT_VERSION"
          
          # 解析版本号
          IFS='.' read -ra PARTS <<< "$CURRENT_VERSION"
          MAJOR=${PARTS[0]}
          MINOR=${PARTS[1]}
          PATCH=${PARTS[2]}
          
          # 根据触发方式确定版本类型
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"
          elif [ "${{ github.event_name }}" = "push" ]; then
            VERSION_TYPE="patch"
          else
            # Pull Request - 使用开发版本
            VERSION_TYPE="dev"
          fi
          
          echo "版本类型: $VERSION_TYPE"
          
          # 计算新版本
          case $VERSION_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
              ;;
            "custom")
              if [ -n "$CUSTOM_VERSION" ]; then
                NEW_VERSION="$CUSTOM_VERSION"
              else
                echo "错误: 自定义版本类型需要提供版本号"
                exit 1
              fi
              ;;
            "dev")
              # PR构建使用开发版本
              SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
              NEW_VERSION="${CURRENT_VERSION}-dev.${SHORT_SHA}"
              ;;
            *)
              echo "错误: 无效的版本类型"
              exit 1
              ;;
          esac
          
          echo "新版本: $NEW_VERSION"
          
          # 输出版本信息
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT
          echo "is_dev=$( [ "$VERSION_TYPE" = "dev" ] && echo "true" || echo "false" )" >> $GITHUB_OUTPUT
      
      # 更新VERSION文件 - 使用更安全的方式
      - name: 📝 Update VERSION file
        if: github.event_name != 'pull_request' && steps.version.outputs.is_dev == 'false'
        run: |
          echo "${{ steps.version.outputs.version }}" > VERSION
          
          # 配置Git用户
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # 检查是否有变更
          if git diff --quiet; then
            echo "VERSION文件无变更，跳过提交"
          else
            git add VERSION
            git commit -m "chore: bump version to ${{ steps.version.outputs.version }} [skip ci]"
            echo "VERSION文件已更新并提交"
          fi
      
      # 推送VERSION文件更新 - 使用官方Actions
      - name: 🔄 Push VERSION update
        if: github.event_name != 'pull_request' && steps.version.outputs.is_dev == 'false'
        run: |
          # 检查是否有待推送的提交
          if git log origin/${{ github.ref_name }}..${{ github.ref_name }} --oneline | grep -q .; then
            echo "推送VERSION文件更新..."
            git push origin ${{ github.ref_name }}
          else
            echo "无需推送，VERSION文件无变更"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # 准备Docker metadata
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # 语义化版本标签
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }},enable=${{ steps.version.outputs.is_dev == 'false' }}
            type=raw,value=${{ steps.version.outputs.major }},enable=${{ steps.version.outputs.is_dev == 'false' }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' && steps.version.outputs.is_dev == 'false' }}
            # 开发版本标签
            type=raw,value=dev,enable=${{ steps.version.outputs.is_dev == 'true' }}
          labels: |
            org.opencontainers.image.title=IP地址安全分析工具
            org.opencontainers.image.description=支持AbuseIPDB API集成的IP地址批量安全分析Web应用
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.licenses=MIT
      
      # 构建和推送Docker镜像
      - name: 🔨 Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_to_registry == 'true' || github.event.inputs.push_to_registry == '') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
      
      # 输出构建信息
      - name: 📊 Build Summary
        run: |
          echo "## 🐋 Docker构建完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**镜像版本:** \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**镜像标签:**" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.meta.outputs.tags }}' | sed 's/^/- `/' | sed 's/$/`/' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**支持架构:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "**镜像摘要:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**拉取命令:**" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
      
      # 安全扫描
      - name: 🛡️ Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true  # 允许扫描失败继续执行
      
      # 上传安全扫描结果
      - name: 📤 Upload Trivy scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true  # 允许上传失败继续执行
  
  # 创建GitHub Release（仅限正式版本）
  create-release:
    if: github.event_name != 'pull_request' && needs.build-and-push.outputs.image-version != '' && !contains(needs.build-and-push.outputs.image-version, 'dev')
    needs: build-and-push
    runs-on: ubuntu-latest
    
    permissions:
      contents: write    # 创建Release需要写权限
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 📋 Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.build-and-push.outputs.image-version }}"
          
          # 生成变更日志
          CHANGELOG=$(cat << EOF
          ## 🚀 Version $VERSION
          
          ### 📦 Docker镜像
          - **镜像标签:** \`ghcr.io/${{ github.repository }}:$VERSION\`
          - **支持架构:** linux/amd64, linux/arm64
          - **镜像摘要:** \`${{ needs.build-and-push.outputs.image-digest }}\`
          
          ### 🔧 拉取命令
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}:$VERSION
          \`\`\`
          
          ### 🐳 Docker Compose
          \`\`\`yaml
          version: '3.8'
          services:
            ip-analyzer:
              image: ghcr.io/${{ github.repository }}:$VERSION
              ports:
                - "5000:5000"
              environment:
                - ABUSEIPDB_API_KEY=\${ABUSEIPDB_API_KEY}
          \`\`\`
          
          > 🔍 完整的变更内容请查看提交历史
          EOF
          )
          
          # 保存到文件
          echo "$CHANGELOG" > release_notes.md
          
          # 设置输出 - 使用更安全的方式
          {
            echo "changelog<<CHANGELOG_EOF"
            echo "$CHANGELOG"
            echo "CHANGELOG_EOF"
          } >> $GITHUB_OUTPUT
      
      - name: 🏷️ Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build-and-push.outputs.image-version }}
          name: Release v${{ needs.build-and-push.outputs.image-version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            VERSION
            README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # 通知构建结果
  notify:
    if: always()
    needs: [build-and-push, create-release]
    runs-on: ubuntu-latest
    
    steps:
      - name: 📢 Build Status
        run: |
          if [ "${{ needs.build-and-push.result }}" = "success" ]; then
            echo "✅ Docker镜像构建成功"
            echo "版本: ${{ needs.build-and-push.outputs.image-version }}"
          else
            echo "❌ Docker镜像构建失败"
            exit 1
          fi
